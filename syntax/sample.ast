Program
  Class: Shape
    Attribute: name : String
      Init:
        String: "Generic Shape"
    Method: init
      Formals:
        n: String
      Return Type: SELF_TYPE
      Body:
        Block
          Block
            Assignment: name
              Identifier: n
            Identifier: self
    Method: getName
      Formals:
      Return Type: String
      Body:
        Block
          Identifier: name
    Method: area
      Formals:
      Return Type: Int
      Body:
        Block
          Int: 0
  Class: Circle inherits Shape
    Attribute: radius : Int
      Init:
        Int: 0
    Method: init
      Formals:
        n: String
        r: Int
      Return Type: SELF_TYPE
      Body:
        Block
          Block
            Assignment: name
              Identifier: n
            Assignment: radius
              Identifier: r
            Identifier: self
    Method: area
      Formals:
      Return Type: Int
      Body:
        Block
          Binary: *
            Binary: *
              Int: 3
              Identifier: radius
            Identifier: radius
  Class: Rectangle inherits Shape
    Attribute: width : Int
      Init:
        Int: 0
    Attribute: height : Int
      Init:
        Int: 0
    Method: init
      Formals:
        n: String
        w: Int
        h: Int
      Return Type: SELF_TYPE
      Body:
        Block
          Block
            Assignment: name
              Identifier: n
            Assignment: width
              Identifier: w
            Assignment: height
              Identifier: h
            Identifier: self
    Method: area
      Formals:
      Return Type: Int
      Body:
        Block
          Binary: *
            Identifier: width
            Identifier: height
  Class: ShapeManager
    Method: testIsVoid
      Formals:
        shape: Shape
      Return Type: Object
      Body:
        Block
          Block
            If
              Condition:
                IsVoid
                  Identifier: shape
              Then:
                Dispatch:
                  Object:
                    New: IO
                  Method: out_string
                  Arguments:
                    String: "Shape is void!\n"
              Else:
                Dispatch:
                  Object:
                    New: IO
                  Method: out_string
                  Arguments:
                    Dispatch:
                      Object:
                        Dispatch:
                          Object:
                            String: "Shape is not void: "
                          Method: concat
                          Arguments:
                            Dispatch:
                              Object:
                                Identifier: shape
                              Method: getName
                      Method: concat
                      Arguments:
                        String: "\n"
            Let
              Binding: emptyShape: Shape
              In:
                If
                  Condition:
                    IsVoid
                      Identifier: emptyShape
                  Then:
                    Dispatch:
                      Object:
                        New: IO
                      Method: out_string
                      Arguments:
                        String: "Empty shape is void as expected\n"
                  Else:
                    Dispatch:
                      Object:
                        New: IO
                      Method: out_string
                      Arguments:
                        String: "ERROR: Empty shape is NOT void!\n"
    Method: identifyShape
      Formals:
        shape: Shape
      Return Type: Object
      Body:
        Block
          Block
            If
              Condition:
                IsVoid
                  Identifier: shape
              Then:
                Block
                  Dispatch:
                    Object:
                      New: IO
                    Method: out_string
                    Arguments:
                      String: "Cannot identify a void shape\n"
                  Identifier: self
              Else:
                Int: 0
            Case
              Expression:
                Identifier: shape
              Branches:
                Branch s: Shape =>
                  Dispatch:
                    Object:
                      New: IO
                    Method: out_string
                    Arguments:
                      String: "It's a generic Shape\n"
                Branch c: Circle =>
                  Dispatch:
                    Object:
                      New: IO
                    Method: out_string
                    Arguments:
                      Dispatch:
                        Object:
                          Dispatch:
                            Object:
                              String: "It's a Circle with area: "
                            Method: concat
                            Arguments:
                              Dispatch:
                                Object:
                                  Dispatch:
                                    Object:
                                      New: Int
                                    Method: set
                                    Arguments:
                                      Dispatch:
                                        Object:
                                          Identifier: c
                                        Method: area
                                Method: toString
                        Method: concat
                        Arguments:
                          String: "\n"
                Branch r: Rectangle =>
                  Dispatch:
                    Object:
                      New: IO
                    Method: out_string
                    Arguments:
                      Dispatch:
                        Object:
                          Dispatch:
                            Object:
                              String: "It's a Rectangle with area: "
                            Method: concat
                            Arguments:
                              Dispatch:
                                Object:
                                  Dispatch:
                                    Object:
                                      New: Int
                                    Method: set
                                    Arguments:
                                      Dispatch:
                                        Object:
                                          Identifier: r
                                        Method: area
                                Method: toString
                        Method: concat
                        Arguments:
                          String: "\n"
                Branch o: Object =>
                  Dispatch:
                    Object:
                      New: IO
                    Method: out_string
                    Arguments:
                      String: "It's some other type of object\n"
    Method: advancedCaseTest
      Formals:
        obj: Object
      Return Type: Object
      Body:
        Block
          Block
            If
              Condition:
                IsVoid
                  Identifier: obj
              Then:
                Block
                  Dispatch:
                    Object:
                      New: IO
                    Method: out_string
                    Arguments:
                      String: "Object is void, showing default behavior\n"
                  Assignment: obj
                    Dispatch:
                      Object:
                        New: Shape
                      Method: init
                      Arguments:
                        String: "Default"
              Else:
                Int: 0
            Case
              Expression:
                Identifier: obj
              Branches:
                Branch s: Shape =>
                  Block
                    Dispatch:
                      Object:
                        New: IO
                      Method: out_string
                      Arguments:
                        Dispatch:
                          Object:
                            Dispatch:
                              Object:
                                String: "Shape found: "
                              Method: concat
                              Arguments:
                                Dispatch:
                                  Object:
                                    Identifier: s
                                  Method: getName
                          Method: concat
                          Arguments:
                            String: "\n"
                    Case
                      Expression:
                        Identifier: s
                      Branches:
                        Branch c: Circle =>
                          Dispatch:
                            Object:
                              New: IO
                            Method: out_string
                            Arguments:
                              Dispatch:
                                Object:
                                  Dispatch:
                                    Object:
                                      String: "Circle with name: "
                                    Method: concat
                                    Arguments:
                                      Dispatch:
                                        Object:
                                          Identifier: c
                                        Method: getName
                                Method: concat
                                Arguments:
                                  String: "\n"
                        Branch r: Rectangle =>
                          Dispatch:
                            Object:
                              New: IO
                            Method: out_string
                            Arguments:
                              Dispatch:
                                Object:
                                  Dispatch:
                                    Object:
                                      String: "Rectangle with name: "
                                    Method: concat
                                    Arguments:
                                      Dispatch:
                                        Object:
                                          Identifier: r
                                        Method: getName
                                Method: concat
                                Arguments:
                                  String: "\n"
                        Branch x: Shape =>
                          Dispatch:
                            Object:
                              New: IO
                            Method: out_string
                            Arguments:
                              Dispatch:
                                Object:
                                  Dispatch:
                                    Object:
                                      String: "Other shape type with name: "
                                    Method: concat
                                    Arguments:
                                      Dispatch:
                                        Object:
                                          Identifier: x
                                        Method: getName
                                Method: concat
                                Arguments:
                                  String: "\n"
                Branch i: Int =>
                  Dispatch:
                    Object:
                      New: IO
                    Method: out_string
                    Arguments:
                      Dispatch:
                        Object:
                          Dispatch:
                            Object:
                              String: "Found an integer: "
                            Method: concat
                            Arguments:
                              Dispatch:
                                Object:
                                  Dispatch:
                                    Object:
                                      New: Int
                                    Method: set
                                    Arguments:
                                      Identifier: i
                                Method: toString
                        Method: concat
                        Arguments:
                          String: "\n"
                Branch s: String =>
                  Dispatch:
                    Object:
                      New: IO
                    Method: out_string
                    Arguments:
                      Dispatch:
                        Object:
                          Dispatch:
                            Object:
                              String: "Found a string: "
                            Method: concat
                            Arguments:
                              Identifier: s
                        Method: concat
                        Arguments:
                          String: "\n"
                Branch o: Object =>
                  Dispatch:
                    Object:
                      New: IO
                    Method: out_string
                    Arguments:
                      String: "Found some other object type\n"
